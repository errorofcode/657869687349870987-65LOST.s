import pygame
objects = []
pygame.init()
window = pygame.display.set_mode((1000, 1000))
coords = []
moves = []
id_last_obj = 0
run = True
cooldown = []
gun_cooldown = []
cooldown_block = []
FPS = 200
removes = []
id_locked = 0
objects_ids = {}
clock = pygame.time.Clock()
class Objects:
    global objects
    global coords
    def create_obj(self, x, y, dx, dy, color, bad, type, timelife):
        global id_last_obj
        global moves
        global cooldown
        global gun_cooldown
        global cooldown_block
        global objects_ids
        global id_locked
        objects.append({"x": x, "y": y, "dx": dx, "dy": dy, "color": color, "bad": bad, "object": None, "type": type, "moving": {"x": 0, "y": 0}, "id" : id_last_obj, "time": timelife, "facing": "left", "id_player": None, "health": 2})
        objects[id_last_obj]["object"] = pygame.Rect(x, y, dx, dy)
        moves.append([{"id": id_last_obj, "x": x, "y": y}])
        print(objects_ids)
        objects_ids[id_locked] = id_last_obj
        if type != "player":
            coords.append((x, y))
        if type == "player":
            cooldown.append(0)
            gun_cooldown.append(0)
            cooldown_block.append(0)
        id_locked += 1
        id_last_obj += 1
    def delete_obj(self, id_obj):
        global objects
        global id_last_obj
        global removes
        global objects_ids
        print(removes)
        print(id_obj)
        print(len(objects))
        print(objects[id_obj])
        print(objects[id_obj-1])
        print(removes)
        removing = False
        will_be_rem = []
        if id_obj not in removes and objects[id_obj]["health"] == 0 and objects[id_obj]["type"] != "gun":
            removing = True
        elif id_obj not in removes and objects[id_obj]["health"] > 0 and objects[id_obj]["type"] != "gun":
            removing = False
            objects[id_obj]["health"] -= 1
            if objects[id_obj]["type"] != "player" and objects[id_obj]["health"] == 1:
                objects[id_obj]["color"] = (255, 255, 0)
            elif objects[id_obj]["type"] != "player" and objects[id_obj]["health"] == 0:
                objects[id_obj]["color"] = (255, 125, 0)
            
        elif id_obj not in removes and objects[id_obj]["type"] == "gun":
            removing = True
        if removing == True:
            will_be_rem.append(id_obj)
            
        for i in range(len(will_be_rem)):
            
            coords.remove((objects[objects_ids[will_be_rem[i]]]["x"], objects[will_be_rem[i]]["y"]))
            moves.remove(moves[objects_ids[will_be_rem[i]]])
            objects.remove(objects[objects_ids[will_be_rem[i]]])
            for k in range(len(objects_ids)):
                if k >= id_last_obj:
                    objects_ids[k] -= 1
            id_last_obj -= 1
            removes.append(objects_ids[id_obj])
            print(objects_ids)
            print(removes)
        
            
        removing = False
    def tick(self):
        num_0 = 0
        global removes
        for i in range(len(objects)):
            num_1 = 0
            for j in range(len(objects)):
                if num_0 not in removes and num_1 not in removes:
                    Utilities.near(None, objects, objects_ids[num_0], objects_ids[num_1])

                num_1 += 1
            num_0 += 1
        for o in range(len(objects)):
            if o not in removes:
                objects[objects_ids[o]]["object"].x += objects[objects_ids[o]]["moving"]["x"]
                objects[objects_ids[o]]["object"].y += objects[objects_ids[o]]["moving"]["y"]
                if objects[objects_ids[o]]["time"] > 0:
                    objects[objects_ids[o]]["time"] -= 1
                elif objects[objects_ids[o]]["time"] == 0:
                    Objects.delete_obj(None, o)
                if o not in removes and objects[objects_ids[o]]["moving"]["x"] == 1:
                    objects[objects_ids[o]]["facing"] = "right"
                elif o not in removes and objects[objects_ids[o]]["moving"]["x"] == -1:
                    objects[objects_ids[o]]["facing"] = "left"

            o += 1



Objects.create_obj(None, 600, 300, 50, 50, (0, 0, 100), False, "player", -1)
Objects.create_obj(None, 350, 300, 50, 50, (100, 0, 0), False, "player", -1)

Objects.create_obj(None, 350, 650, 50, 50, (0, 255, 0), False, "block", -1)

Objects.create_obj(None, 400, 650, 50, 50, (0, 255, 0), False, "block", -1)
Objects.create_obj(None, 450, 650, 50, 50, (0, 255, 0), False, "block", -1)
Objects.create_obj(None, 500, 650, 50, 50, (0, 255, 0), False, "block", -1)
Objects.create_obj(None, 550, 650, 50, 50, (0, 255, 0), False, "block", -1)
Objects.create_obj(None, 600, 650, 50, 50, (0, 255, 0), False, "block", -1)




class moving:
    global moves
    global objects
    global removes
    global objects_ids
    def save(self):
        global objects_idsddddd
        for i in range(len(objects)):
            if i not in removes:
                moves[i].append({"id": i, "x": objects[objects_ids[i]]["object"].x, "y": objects[objects_ids[i]]["object"].y})
    def load(self, id, id_move):
        global removes
        global objects_ids
        if id not in removes:
            objects[id]["moving"]["x"] = 0
            objects[id]["moving"]["y"] = 0
            if id not in removes and len(moves) >= (id + 1) and len(moves[id]) >= (id_move + 1):
                objects[id]["object"].x = moves[id][id_move]["x"]
                objects[id]["object"].y = moves[id][id_move]["y"]
class draving:
    global window
    global objects_ids
    def draw(self, id, value):
        pygame.draw.rect(window, value[id]["color"], value[id]["object"])
        rect = pygame.draw.rect(window, value[id]["color"], value[id]["object"])

        window.blit(window, rect, rect)
    def draw_all(self, value):
        for i in range(len(value)):
            if i not in removes:
                draving.draw(None, i, value)

class gun:
    def create(self, time, id):
        global objects
        global speed
        global id_last_obj
        global objects_ids
        if objects[id]["facing"] == "left":
            facing = -1 * speed
        elif objects[id]["facing"] == "right":
            facing = 1 * speed
        Objects.create_obj(None, objects[id]["object"].center[0], objects[id]["object"].center[1], 10, 10, (255, 0, 0), True, "gun", time)
        objects[id_last_obj - 1]["moving"]["x"] = facing
        objects[id_last_obj - 1]["id_player"] = id

        coords.append((objects[id]["object"].x, objects[id]["object"].y))

speed = 1
def healthbar(id, x, y, color):
    global objects
    global window
    global removes
    global objects_ids
    if id not in removes:
        rectled = pygame.Rect(x, y, (objects[id]["health"] + 1) * 120, 20)
    rectled2 = pygame.Rect(x, y, 3 * 120, 20)
    pygame.draw.rect(window, (50, 50, 50), rectled2)
    rected2 = pygame.draw.rect(window, (50, 50, 50), rectled2)
    window.blit(window, rected2, rected2)
    if id not in removes:
        pygame.draw.rect(window, color, rectled)
        rected = pygame.draw.rect(window, color, rectled)
        window.blit(window, rected, rected)
    
class Utilities:
    def near(self, value, obj1, obj2):
        global run
        global removes
        global objects_ids
        global objects_ids
        will_be_rem = []
        collide = value[objects_ids[obj1]]["object"].colliderect(value[objects_ids[obj2]]["object"])
        Utilities.air(None)

        if obj1 not in removes and obj2 not in removes and collide and value[objects_ids[obj1]] != value[objects_ids[obj2]] and value[objects_ids[obj2]]["type"] != "gun" and value[objects_ids[obj1]]["type"] != "gun":
            moving.load(None, objects_ids[obj1], -2)
        if obj1 not in removes and obj2 not in removes and collide and value[objects_ids[obj1]] != value[objects_ids[obj2]] and value[objects_ids[obj1]]["type"] != "gun" and value[objects_ids[obj2]]["type"] != "gun":
            moving.load(None, objects_ids[obj2], -2)

        if obj1 not in removes and obj2 not in removes and collide and value[objects_ids[obj1]] != value[objects_ids[obj2]] and value[objects_ids[obj2]]["type"] == "gun" and value[objects_ids[obj2]]["id_player"] != obj1 and value[objects_ids[obj1]]["type"] != "gun":

            coords.append((objects[objects_ids[obj1]]["x"], objects[objects_ids[obj1]]["y"]))
            
            will_be_rem.append(obj1)
            will_be_rem.append(obj2)
        for i in range(len(will_be_rem)):
            Objects.delete_obj(None, objects_ids[will_be_rem[i]])
    def neartest(self, obj1):
        global objects
        global removes
        global objects_ids
        start = False
        for i in range(len(objects)):
            if i not in removes and obj1 not in removes:
                obj1_1 = pygame.Rect(objects[objects_ids[i]]["object"].x, objects[objects_ids[i]]["object"].y, objects[objects_ids[i]]["dx"], objects[objects_ids[i]]["dy"])
                obj2_1 = pygame.Rect(objects[objects_ids[obj1]]["object"].x - 1, objects[objects_ids[obj1]]["object"].y - 1, objects[objects_ids[obj1]]["dx"] + 2, objects[objects_ids[obj1]]["dy"] + 2)
                cnts = 0
                for j in range(len(objects)):
                    if obj1 not in removes and j not in removes:
                        obj1_2 = pygame.Rect(objects[objects_ids[obj1]]["object"].x, objects[objects_ids[obj1]]["object"].y, objects[objects_ids[obj1]]["dx"], objects[objects_ids[obj1]]["dy"])
                        obj2_2 = pygame.Rect(objects[objects_ids[j]]["object"].x + 15, objects[objects_ids[j]]["object"].y - 15, objects[objects_ids[j]]["dx"] - 30, objects[objects_ids[j]]["dy"] + 30)
                        collide_2 = obj1_2.colliderect(obj2_2)
                        if collide_2 == True and objects[objects_ids[obj1]] != objects[objects_ids[j]]:
                            cnts += 1

                        obj1_2 = None
                        obj2_2 = None
                if obj2_1.colliderect(obj1_1) and objects[objects_ids[obj1]] != objects[objects_ids[i]] and cnts == 0:
                    start = True
            obj2_1 = None
            obj1_1 = None
        return start
    


    def air(self):
        global objects
        global speed
        global removes
        global objects_ids
        for i in range(len(objects)):
            cnts = 0
            for j in range(len(objects)):
                if i not in removes and j not in removes:
                    obj1_1 = pygame.Rect(objects[objects_ids[i]]["object"].x, objects[objects_ids[i]]["object"].y, objects[objects_ids[i]]["dx"], objects[objects_ids[i]]["dy"] + 1)
                    obj2_1 = pygame.Rect(objects[objects_ids[j]]["object"].x, objects[objects_ids[j]]["object"].y - 1, objects[objects_ids[j]]["dx"], objects[objects_ids[j]]["dy"] + 1)
                    collide_1 = obj1_1.colliderect(obj2_1)
                    if collide_1 == True and objects[objects_ids[i]] != objects[objects_ids[j]]:
                        cnts += 1
                obj1_1 = None
                obj2_1 = None
            if cnts == 0 and i not in removes and objects[objects_ids[i]]["type"] == "player" and objects[objects_ids[i]]["moving"]["y"] < 2:
                objects[objects_ids[i]]["moving"]["y"] += 0.001 * speed



def near_for_block(obj1):
    global objects
    global removes
    global objects_ids
    cnt = 0
    for i in range(len(objects)):
        if i not in removes and i != obj1 and obj1 not in removes:
            obj1_2 = pygame.Rect(objects[objects_ids[i]]["object"].x, objects[objects_ids[i]]["object"].y, objects[objects_ids[i]]["dx"], objects[objects_ids[i]]["dy"])
            obj2_2 = pygame.Rect(((objects[objects_ids[obj1]]["object"].x // grid["x"]) * grid["x"]), (((objects[objects_ids[obj1]]["object"].y + objects[objects_ids[obj1]]["dy"]) // grid["x"]) * grid["x"]), objects[objects_ids[obj1]]["dx"], objects[objects_ids[obj1]]["dy"])
            collide_2 = obj2_2.colliderect(obj1_2)
            if collide_2 == True:
                cnt += 1
    if cnt == 0:
        return True
    else:
        return False
    

grid = {"x": 50, "y": 50}
settings = [[50, 800], [550, 800]]
def pressing(id, left, right, up, down, gun_, cid, jump):
    global cooldown
    global gun_cooldown
    global speed
    global cooldown_block
    global settings
    global removes
    global objects_ids
    pressed = False
    if id not in removes and left and cooldown_block[cid] == 0:
        objects[id]["moving"]["x"] = -1 * speed
        objects[id]["facing"] = "left"
        pressed = True
    if id not in removes and right and cooldown_block[cid] == 0:
        objects[id]["moving"]["x"] = 1 * speed
        objects[id]["facing"] = "right"
        pressed = True
    if id not in removes and up and objects[id]["moving"]["y"] == 0:
        objects[id]["moving"]["y"] = -5 * speed
    if id not in removes and jump and Utilities.neartest(None, id) and objects[id]["moving"]["x"] != 0:
        objects[id]["moving"]["y"] = -5 * speed
        if objects[id]["facing"] == "left":
            objects[id]["moving"]["x"] = 1
            objects[id]["object"].x += 1
        elif objects[id]["facing"] == "right":
            objects[id]["moving"]["x"] = -1
            objects[id]["object"].x -= 1
        cooldown_block[cid] = 50
    
    if id not in removes and gun_ and gun_cooldown[cid] == 0:
        gun.create(None, 1000, id)
        gun_cooldown[cid] = 450
    if id not in removes and down and cooldown[cid] == 0 and near_for_block(id):
        if ((((objects[id]["object"].x) // grid["x"]) * grid["x"]), (((objects[id]["object"].y + (objects[id]["dy"])) // grid["y"]) * grid["y"])) in coords:
            pass
        else:

            Objects.create_obj(None, (((objects[id]["object"].x) // grid["x"]) * grid["x"]), (((objects[id]["object"].y + (objects[id]["dy"]) * 2) // grid["y"]) * grid["y"]), objects[id]["dx"], objects[id]["dy"], (0, 255, 0), False, "block", 1000)
            cooldown[cid] = 900
    if id not in removes and pressed == False and cooldown_block[cid] == 0:
        objects[id]["moving"]["x"] = 0
def cooldown_set():
    global cooldown
    global gun_cooldown
    for i in range(len(cooldown)):
        if cooldown[i] > 0:
            cooldown[i] -= 1
    for i in range(len(gun_cooldown)):
        if gun_cooldown[i] > 0:
            gun_cooldown[i] -= 1
    for i in range(len(cooldown_block)):
        if cooldown_block[i] > 0:
            cooldown_block[i] -= 1
while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    keys = pygame.key.get_pressed()
    pressing(0, keys[pygame.K_LEFT], keys[pygame.K_RIGHT], keys[pygame.K_UP], keys[pygame.K_DOWN], keys[pygame.K_SPACE], 0, keys[pygame.K_l])
    pressing(1, keys[pygame.K_a], keys[pygame.K_d], keys[pygame.K_w], keys[pygame.K_s], keys[pygame.K_q], 1, keys[pygame.K_e])
    cooldown_set()



    moving.save(None)
    Objects.tick(None)
    window.fill(0)
    draving.draw_all(None, objects)
    healthbar(0, settings[0][0], settings[0][1], (0, 0, 255))
    healthbar(1, settings[1][0], settings[1][1], (255, 0, 0))
    pygame.display.flip()

    pygame.display.update()
    clock.tick(FPS)
for i in range(2000):
    pygame.display.flip()
pygame.quit()
exit()