import pygame
objects = []
pygame.init()
window = pygame.display.set_mode((1000, 1000))
coords = {}
moves = {}
run = True
background = pygame.image.load(r"/Users/1/Game_appdata/lg.png").convert()
cooldown = []
gun_cooldown = []
cooldown_block = []
FPS = 200
clock = pygame.time.Clock()
removes = []
class create:
    global objects
    global moves
    global cooldown
    global cooldown_block
    global gun_cooldown
    def object(self, x, y, dx, dy, color, bad, type, timelife, mx, my):
        objects.append({"x": x, "y": y, "dx": dx, "dy": dy, "bad": bad, "color": color, "type": type, "timelife": timelife, "obj": pygame.Rect(x, y, dx, dy), "moving": {"x": mx, "y": my}, "health": 2, "facing": "left"})
        moves[(len(objects) - 1)] = [{"x": objects[-1]["obj"].x, "y": objects[-1]["obj"].y}]
        if type == "player":
            cooldown.append(0)
            gun_cooldown.append(0)
            cooldown_block.append(0)
            

class remove:
    global objects
    global moves
    global removes
    def object(self, id):
        objects.remove(objects[id])
        del(moves[id])
        removes.append(id)
        print(moves)
        print()
class Utilities:
    def near(self, obj1):
        global objects
        global moves
        for obj2 in range(len(objects)):
            collide = objects[obj1]["obj"].colliderect(objects[obj2]["obj"])
            returning = False
            if collide and obj1 != obj2 and objects[obj2]["type"] != "gun" and objects[obj1]["type"] != "gun":
                if returning != "delete":
                    returning = True

            if collide and obj1 != obj2 and objects[obj2]["type"] == "gun" and objects[obj2]["id_player"] != obj1 and objects[obj1]["type"] != "gun":
                returning = "delete"
        return returning
    
    def neartest(self, obj1):
        global objects
        start = False
        for i in range(len(objects)):
            obj1_1 = pygame.Rect(objects[i]["obj"].x, objects[i]["obj"].y, objects[i]["dx"], objects[i]["dy"])
            obj2_1 = pygame.Rect(objects[obj1]["obj"].x - 1, objects[obj1]["obj"].y - 1, objects[obj1]["dx"] + 2, objects[obj1]["dy"] + 2)
            if obj2_1.colliderect(obj1_1) and objects[obj1] != objects[i]:
                start = True
            obj2_1 = None
            obj1_1 = None
        
        return start
    


    def air(self, obj1):
        global objects
        cnts = 0
        for j in range(len(objects)):
            obj1_1 = pygame.Rect(objects[obj1]["obj"].x - 1, objects[obj1]["obj"].y - 1, objects[obj1]["dx"] + 2, objects[obj1]["dy"] + 2)
            obj2_1 = pygame.Rect(objects[j]["obj"].x, objects[j]["obj"].y, objects[j]["dx"], objects[j]["dy"])
            collide_1 = obj1_1.colliderect(obj2_1)
            if collide_1 == True and j != obj1:
                cnts += 1
            obj1_1 = None
            obj2_1 = None
        if cnts == 0:
            return True
        else:
            return False
            

           
class tick:
    global objects
    global moves
    def tick():
        delete = []
        for i in range(len(objects)):
            moves[i].append({"x": objects[i]["obj"].x, "y": objects[i]["obj"].y})
            objects[i]["obj"].x += objects[i]["moving"]["x"]
            objects[i]["obj"].y += objects[i]["moving"]["y"]
            objects[i]["timelife"] -= 1
            pygame.draw.rect(window, objects[i]["color"], objects[i]["obj"])
            moment = Utilities.near(None, i)
            if moment:
                objects[i]["obj"].x, objects[i]["obj"].y = moves[i][-1]["x"], moves[i][-1]["y"]
            if objects[i]["timelife"] == 0:
                delete.append(i)
            if moment == "delete":
                delete.append(i)
            if objects[i]["type"] == "player" and Utilities.air(None, i) and objects[i]["moving"]["y"] > -2:
                objects[i]["moving"]["y"] += 0.001
        for target in range(len(delete)):
            objects[target] = {}
        delnum = len(delete)
        while delnum > 0:
            for o in range(len(objects)):
                if objects[o] == {}:
                    remove.object(None, o)
                    delnum -= 1
                    break
grid = {"x": 50, "y": 50}   
def near_for_block(obj1):
    global objects
    global removes
    cnt = 0
    for i in range(len(objects)):
        if i not in removes and i != obj1 and obj1 not in removes:
            obj1_2 = pygame.Rect(objects[i]["obj"].x, objects[i]["obj"].y, objects[i]["dx"], objects[i]["dy"])
            obj2_2 = pygame.Rect(((objects[obj1]["obj"].x // grid["x"]) * grid["x"]), (((objects[obj1]["obj"].y + objects[obj1]["dy"]) // grid["x"]) * grid["x"]), objects[obj1]["dx"], objects[obj1]["dy"])
            collide_2 = obj2_2.colliderect(obj1_2)
            if collide_2 == True:
                cnt += 1
    if cnt == 0:
        return True
    else:
        return False
def cooldown_set():
    global cooldown
    global gun_cooldown
    for i in range(len(cooldown)):
        if cooldown[i] > 0:
            cooldown[i] -= 1
    for i in range(len(gun_cooldown)):
        if gun_cooldown[i] > 0:
            gun_cooldown[i] -= 1
    for i in range(len(cooldown_block)):
        if cooldown_block[i] > 0:
            cooldown_block[i] -= 1
def pressing(id, left, right, up, down, gun_, cid, jump):
    global cooldown
    global gun_cooldown
    global speed
    global cooldown_block
    global settings
    global removes
    global grid
    pressed = False
    if id not in removes and left and cooldown_block[cid] == 0:
        objects[id]["moving"]["x"] = -1
        objects[id]["facing"] = "left"
        pressed = True
    if id not in removes and right and cooldown_block[cid] == 0:
        objects[id]["moving"]["x"] = 1
        objects[id]["facing"] = "right"
        pressed = True
    if id not in removes and up and objects[id]["moving"]["y"] == 0:
        objects[id]["moving"]["y"] = -5
    if id not in removes and jump and Utilities.neartest(None, id) and objects[id]["moving"]["x"] != 0:
        objects[id]["moving"]["y"] = -5
        if objects[id]["facing"] == "left":
            objects[id]["moving"]["x"] = 1
            objects[id]["obj"].x += 1
        elif objects[id]["facing"] == "right":
            objects[id]["moving"]["x"] = -1
            objects[id]["obj"].x -= 1
        cooldown_block[cid] = 50
    
    if id not in removes and gun_ and gun_cooldown[cid] == 0 and objects[id]["facing"] == "right":
        create.create_obj(None, objects[id]["obj"].x, objects[id]["obj"].y, objects[id]["dx"], objects[id]["dy"], (0, 255, 0), False, "block", 1000, 1, 0)
        gun_cooldown[cid] = 450
    if id not in removes and gun_ and gun_cooldown[cid] == 0 and objects[id]["facing"] == "left":
        create.create_obj(None, objects[id]["obj"].x, objects[id]["obj"].y, objects[id]["dx"], objects[id]["dy"], (0, 255, 0), False, "block", 1000, -1, 0)
        gun_cooldown[cid] = 450
    if id not in removes and down and cooldown[cid] == 0 and near_for_block(id):
        if ((((objects[id]["obj"].x) // grid["x"]) * grid["x"]), (((objects[id]["obj"].y + (objects[id]["dy"])) // grid["y"]) * grid["y"])) in coords:
            pass
        else:

            create.object(None, (((objects[id]["obj"].x) // grid["x"]) * grid["x"]), (((objects[id]["obj"].y + (objects[id]["dy"]) * 2) // grid["y"]) * grid["y"]), objects[id]["dx"], objects[id]["dy"], (0, 255, 0), False, "block", 1000, 0, 0)
            cooldown[cid] = 900
    if id not in removes and pressed == False and cooldown_block[cid] == 0:
        objects[id]["moving"]["x"] = 0
create.object(None, 300, 300, 50, 50, (100, 100, 100), False, "block", -1, 0, 0)
create.object(None, 300, 200, 50, 50, (255, 0, 0), False, "player", -1, 0, 0)
create.object(None, 200, 200, 50, 50, (100, 100, 255), False, "player", -1, 0, 0)
create.object(None, 200, 300, 50, 50, (100, 100, 100), False, "block", -1, 0, 0)
while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    keys = pygame.key.get_pressed()
    pressing(0, keys[pygame.K_LEFT], keys[pygame.K_RIGHT], keys[pygame.K_UP], keys[pygame.K_DOWN], keys[pygame.K_SPACE], 0, keys[pygame.K_l])
    pressing(1, keys[pygame.K_a], keys[pygame.K_d], keys[pygame.K_w], keys[pygame.K_s], keys[pygame.K_q], 1, keys[pygame.K_e])
    cooldown_set()
    
    window.fill(0)
    tick.tick()
    pygame.display.flip()
    
    pygame.display.update()
    clock.tick(FPS)
for i in range(2000):
    pygame.display.flip()
pygame.quit()
exit()