# Example file showing a circle moving on screen
'''
import pygame

# pygame setup
pygame.init()
screen = pygame.display.set_mode((1280, 720))
clock = pygame.time.Clock()
running = True
dt = 0

player_pos = pygame.Vector2(screen.get_width() / 2, screen.get_height() / 2)

while running:
    # poll for events
    # pygame.QUIT event means the user clicked X to close your window
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # fill the screen with a color to wipe away anything from last frame
    screen.fill("purple")

    pygame.draw.circle(screen, "red", player_pos, 40)
    pygame.draw.circle(screen, "blue", (120, 120), 40)
    keys = pygame.key.get_pressed()
    if keys[pygame.K_w]:
        player_pos.y -= 300 * dt
    if keys[pygame.K_s]:
        player_pos.y += 300 * dt
    if keys[pygame.K_a]:
        player_pos.x -= 300 * dt
    if keys[pygame.K_d]:
        player_pos.x += 300 * dt

    # flip() the display to put your work on screen
    pygame.display.flip()

    # limits FPS to 60
    # dt is delta time in seconds since last frame, used for framerate-
    # independent physics.
    dt = clock.tick(60) / 1000

pygame.quit()
'''
import pygame
objects = []
pygame.init()
window = pygame.display.set_mode((1000, 1000))
coords = []
id_last_obj = 0
run = True
class Objects:
    global objects
    global coords
    def create_obj(self, x, y, dx, dy, color, bad, type, timelife):
        global id_last_obj
        objects.append({"x": x, "y": y, "dx": dx, "dy": dy, "color": color, "bad": bad, "object": None, "type": type, "moving": {"x": 0, "y": 0}, "tag": True, "time": timelife})
        objects[id_last_obj]["object"] = pygame.Rect(x, y, dx, dy)
        if type != "player":
            coords.append((x, y))

        id_last_obj += 1
    def delete_obj(self, id_obj):

        coords.remove((objects[id_obj]["x"], objects[id_obj]["y"]))
        objects[id_obj] = {"tag": False}
    def tick(self):
        num_0 = 0
        for i in range(len(objects)):
            num_1 = 0
            for j in range(len(objects)):
                if objects[num_0]["tag"] and objects[num_1]["tag"]:
                    Utilities.near(None, objects, num_0, num_1)
                num_1 += 1
            num_0 += 1
        for o in range(len(objects)):
            if objects[o]["tag"]:
                objects[o]["object"].x += objects[o]["moving"]["x"]
                objects[o]["object"].y += objects[o]["moving"]["y"]
                if objects[o]["time"] > 0:
                    objects[o]["time"] -= 1
                elif objects[o]["time"] == 0:
                    Objects.delete_obj(None, o)

            o += 1

Objects.create_obj(None, 200, 200, 50, 50, (0, 255, 0), False, "block", -1)
Objects.create_obj(None, 300, 300, 50, 50, (255, 255, 255), False, "player", -1)
Objects.create_obj(None, 250, 250, 50, 50, (0, 255, 0), False, "block", -1)
Objects.create_obj(None, 300, 350, 50, 50, (0, 255, 0), False, "block", -1)
Objects.create_obj(None, 350, 650, 50, 50, (0, 255, 0), False, "block", -1)
Objects.delete_obj(None, 0)
moves = []

class moving:
    global moves
    global objects
    def save(self):
        for i in range(len(objects)):
            if objects[i]["tag"]:
                if objects[i]["type"] == "player":
                    moves.append({"x": objects[i]["object"].x, "y": objects[i]["object"].y})
    def load(self, id, id_move):
        objects[id]["moving"]["x"] = 0
        objects[id]["moving"]["y"] = 0
        objects[id]["object"].x = moves[id_move]["x"]
        objects[id]["object"].y = moves[id_move]["y"]
class draving:
    global window
    def draw(self, id, value):
        pygame.draw.rect(window, value[id]["color"], value[id]["object"])
    def draw_all(self, value):
        for i in range(len(value)):
            if value[i]["tag"]:
                draving.draw(None, i, value)
class Utilities:
    def near(self, value, obj1, obj2):
        collide = value[obj1]["object"].colliderect(value[obj2]["object"])
        Utilities.air(None)

        if collide and value[obj1]["type"] == "player" and value[obj1]["type"] != value[obj2]["type"]:
            moving.load(None, obj1, -2)
        if collide and value[obj2]["type"] == "player" and value[obj1]["type"] != value[obj2]["type"]:
            moving.load(None, obj2, -2)

    def air(self):
        global objects

        for i in range(len(objects)):
            cnts = 0
            for j in range(len(objects)):
                if objects[i]["tag"] and objects[j]["tag"]:
                    obj1_1 = pygame.Rect(objects[i]["object"].x, objects[i]["object"].y, objects[i]["dx"] - 1, objects[i]["dy"] + 1)
                    obj2_1 = pygame.Rect(objects[j]["object"].x, objects[j]["object"].y, objects[j]["dx"] - 1, objects[j]["dy"] + 1)
                    collide_1 = obj1_1.colliderect(obj2_1)
                    if collide_1 == True and objects[i] != objects[j]:
                        cnts += 1
                obj1_1 = None
                obj2_1 = None
            if cnts == 0 and objects[i]["tag"] and objects[i]["type"] == "player" and objects[i]["moving"]["y"] < 2:
                objects[i]["moving"]["y"] += 0.001



cooldown = 0
grid = {"x": 50, "y": 50}
while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
    keys = pygame.key.get_pressed()


    pressed = False
    if keys[pygame.K_LEFT]:
        objects[1]["moving"]["x"] = -1
        pressed = True
    if keys[pygame.K_RIGHT]:
        objects[1]["moving"]["x"] = 1
        pressed = True
    if keys[pygame.K_UP] and objects[1]["moving"]["y"] == 0:
        objects[1]["moving"]["y"] = -2.5
    if keys[pygame.K_DOWN] and cooldown == 0:
        if ((((objects[1]["object"].x) // grid["x"]) * grid["x"]), (((objects[1]["object"].y + (objects[1]["dy"]) * 2) // grid["y"]) * grid["y"])) in coords:
            pass
        else:
            Objects.create_obj(None, (((objects[1]["object"].x) // grid["x"]) * grid["x"]), (((objects[1]["object"].y + (objects[1]["dy"]) * 2) // grid["y"]) * grid["y"]), objects[1]["dx"], objects[1]["dy"], (0, 255, 0), False, "block", 12000)
            cooldown = 10000
    if pressed == False:
        objects[1]["moving"]["x"] = 0

    moving.save(None)
    Objects.tick(None)
    window.fill(0)
    draving.draw_all(None, objects)
    pygame.display.flip()
    if cooldown > 0:
        cooldown -= 1
for i in range(2000):
    pygame.display.flip()
pygame.quit()
exit()